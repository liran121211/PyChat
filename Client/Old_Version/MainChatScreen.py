# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainChatScreen.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import threading
import time
import random

import requests
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QStandardItemModel, QStandardItem, QPixmap, QIcon
from PyQt5.QtSvg import QSvgWidget
from PyQt5.QtWidgets import QFrame, QListWidgetItem

from Protocol import *
from Observable import Observable
import CSS.main_chat_screen_css


class MainChatScreen(Observable):
    def __init__(self, ClientTCP):
        self.name = "MainChatWindow"
        Observable.__init__(self)
        self.client = ClientTCP
        self.user_list_model = None
        self.chat_history = ""
        self.threads = {}

    def setupUi(self, MainChatWindow):
        MainChatWindow.setObjectName("MainChatWindow")
        MainChatWindow.resize(1574, 832)
        MainChatWindow.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainChatWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.main_chat_textbox = QtWidgets.QTextBrowser(self.centralwidget)
        self.main_chat_textbox.setEnabled(True)
        self.main_chat_textbox.setGeometry(QtCore.QRect(330, 60, 1001, 631))
        self.main_chat_textbox.setObjectName("main_chat_textbox")

        self.users_list = QtWidgets.QListView(self.centralwidget)
        self.users_list.setGeometry(QtCore.QRect(1340, 60, 221, 681))
        self.users_list.setObjectName("users_list")
        self.users_list.setStyleSheet("background-color: rgb(243, 243, 243);\n"
                                      "border-radius: 10px;\ncolor: rgb(95, 95, 95);\n")
        self.chat_rooms_list = QtWidgets.QListView(self.centralwidget)
        self.chat_rooms_list.setGeometry(QtCore.QRect(10, 0, 311, 691))
        self.chat_rooms_list.setObjectName("chat_rooms_list")
        self.users_list.setSpacing(5)

        self.message_textfield = QtWidgets.QLineEdit(self.centralwidget)
        self.message_textfield.setGeometry(QtCore.QRect(350, 700, 931, 41))
        self.message_textfield.setStyleSheet("background-color: rgb(243, 243, 243);\n"
                                             "border-radius: 10px;\n"
                                             "color: rgb(95, 95, 95);")
        self.message_textfield.setClearButtonEnabled(False)
        self.message_textfield.setObjectName("message_textfield")
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.message_textfield.setFont(font)

        self.user_avatar = QSvgWidget(self.centralwidget)
        self.user_avatar.setGeometry(20, 710, 61, 41)
        self.user_avatar.setObjectName("user_avatar")

        self.username_label = QtWidgets.QLabel(self.centralwidget)
        self.username_label.setGeometry(QtCore.QRect(80, 710, 61, 41))
        self.username_label.setObjectName("username_label")

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(150, 720, 61, 21))
        self.label_3.setObjectName("label_3")

        self.send_button = QtWidgets.QPushButton(self.centralwidget)
        self.send_button.setGeometry(QtCore.QRect(1290, 710, 31, 21))
        self.send_button.setContextMenuPolicy(Qt.DefaultContextMenu)
        self.send_button.setStyleSheet("image: url(:/send_button/send_button1.png);\n"
                                       "background-color: rgb(243, 243, 243);\n"
                                       "border: 0px;\n"
                                       "")
        self.send_button.setAutoDefault(False)
        self.send_button.setObjectName("send_button")

        self.textfield_label_right = QtWidgets.QLabel(self.centralwidget)
        self.textfield_label_right.setObjectName(u"textfield_label_right")
        self.textfield_label_right.setGeometry(QtCore.QRect(1270, 700, 61, 41))
        self.textfield_label_right.setStyleSheet(u"background-color: rgb(243, 243, 243);\n"
                                                 "border-radius: 10px;\n"
                                                 "color: rgb(95, 95, 95);")
        self.textfield_label_right.setFrameShape(QFrame.NoFrame)
        self.textfield_label_left = QtWidgets.QLabel(self.centralwidget)
        self.textfield_label_left.setObjectName(u"textfield_label_left")
        self.textfield_label_left.setFrameShape(QFrame.NoFrame)
        self.textfield_label_left.setGeometry(QtCore.QRect(330, 700, 61, 41))
        self.textfield_label_left.setStyleSheet(u"background-color: rgb(243, 243, 243);\n"
                                                "border-radius: 10px;\n"
                                                "color: rgb(95, 95, 95);")

        self.toolbar_frame = QFrame(self.centralwidget)
        self.toolbar_frame.setObjectName(u"toolbar_frame")
        self.toolbar_frame.setGeometry(QtCore.QRect(330, 0, 1231, 51))
        self.toolbar_frame.setFrameShape(QFrame.Box)
        self.toolbar_frame.setFrameShadow(QFrame.Raised)

        self.settings_frame = QFrame(self.centralwidget)
        self.settings_frame.setObjectName(u"settings_frame")
        self.settings_frame.setGeometry(QtCore.QRect(19, 700, 301, 51))
        self.settings_frame.setFrameShape(QFrame.Box)
        self.settings_frame.setFrameShadow(QFrame.Raised)

        self.textfield_label_right.raise_()
        self.settings_frame.raise_()
        self.main_chat_textbox.raise_()
        self.users_list.raise_()
        self.chat_rooms_list.raise_()
        self.send_button.raise_()
        self.toolbar_frame.raise_()
        self.label_3.raise_()
        self.textfield_label_left.raise_()
        self.message_textfield.raise_()

        MainChatWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainChatWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1574, 21))
        self.menubar.setObjectName("menubar")
        MainChatWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainChatWindow)
        self.statusbar.setObjectName("statusbar")
        MainChatWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainChatWindow)
        QtCore.QMetaObject.connectSlotsByName(MainChatWindow)

        # other specifications
        self.username_label.setText(self.client_data["username"])
        self.user_avatar.renderer().load(getAvatar(username=self.client_data["username"], obj_type="SVG"))
        self.send_button.clicked.connect(self.sendMessage)
        self.message_textfield.textEdited.connect(self.messageFieldStatus)
        MainChatWindow.keyPressEvent = self.keyPressEvent
        self.initQListView()

    def retranslateUi(self, MainChatWindow):
        _translate = QtCore.QCoreApplication.translate
        MainChatWindow.setWindowTitle(_translate("MainChatWindow", "MainWindow"))
        self.username_label.setText(_translate("MainChatWindow", "username..."))
        self.label_3.setText(_translate("MainChatWindow", "tools images"))

    def updateChat(self, data):
        def threadWorker():
            self.chat_history += self.main_chat_textbox.toPlainText()
            self.main_chat_textbox.append(data)

        self.threads["UPDATE_CHAT"] = threading.Thread(target=threadWorker)
        self.threads["UPDATE_CHAT"].start()

    def sendMessage(self):
        if self.message_textfield.text() != "":
            self.buttonStatus(False)
            self.notify(build_message(PROTOCOLS["client_message"], self.message_textfield.text()))
            self.message_textfield.setText("")

    def messageFieldStatus(self):
        if self.message_textfield.text() == "":
            self.buttonStatus(False)
        else:
            self.buttonStatus(True)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Return and self.message_textfield.hasFocus() is True:
            self.sendMessage()

    def initQListView(self):
        self.user_list_model = QStandardItemModel(self.users_list)  # define model structure for QListView
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.users_list.setFont(font)

        user_avatar = QtCore.QSize()
        user_avatar.setHeight(40)
        user_avatar.setWidth(40)
        self.users_list.setIconSize(user_avatar)

    def updateUserList(self, user_lst):
        """
        Update QListView widget and show the online users only.
        :param user_lst: list of users that have ('online'=True) in the database
        :return: None
        """

        def filterDuplicates():
            """
            Filter all users from list that are already logged in.
            :return: None
            """
            if self.user_list_model is not None:
                count_users = self.user_list_model.rowCount()
                current_users = [self.user_list_model.item(index).text() for index in range(count_users)]
                filtered_users = [value for value in user_lst if value not in current_users]

                self.threads["UPDATE_QListView"] = threading.Thread(target=update, args=(filtered_users,))
                self.threads["UPDATE_QListView"].start()

        def update(filtered_users):
            """
            Refresh the QListView widget with the filtered list.
            :param filtered_users: filtered user list.
            :return: None
            """
            for username in filtered_users:
                item = QStandardItem(username)
                item.setIcon(getAvatar(username=username, obj_type="QICON"))
                item.setEditable(False)
                rgb = randomColor()
                item.setForeground(QtGui.QColor(rgb[0], rgb[1], rgb[2]))
                self.user_list_model.appendRow(item)
            self.users_list.setModel(self.user_list_model)
            self.users_list.update()

        self.threads["FILTER_DUPLICATED_USER_LIST"] = threading.Thread(target=filterDuplicates)
        self.threads["FILTER_DUPLICATED_USER_LIST"].start()

    def updateRoomsList(self, rooms):
        """
        Update QListView widget and show the available chat rooms.
        :param rooms: list of rooms in the database
        :return: None
        """
        self.chat_rooms_list_model = QStandardItemModel(self.chat_rooms_list)  # define model structure for QListView
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.chat_rooms_list.setFont(font)
        for room in rooms:
            self.chat_rooms_list_model.appendRow(QStandardItem(room))

        self.chat_rooms_list.setModel(self.chat_rooms_list_model)
        self.chat_rooms_list.update()

    def buttonStatus(self, mode):
        if mode:
            self.send_button.setStyleSheet("image: url(:/send_button/send_button1.png);\n"
                                           "background-color: rgb(243, 243, 243);\n"
                                           "border: 0px;\n"
                                           "")
        else:
            self.send_button.setStyleSheet("image: url(:/send_button_disabled/send_button_disabled.png);\n"
                                           "background-color: rgb(243, 243, 243);\n"
                                           "border: 0px;\n"
                                           "")


def getAvatar(username, obj_type):
    """
    Fetch unique avatar image for every user from online resource
    :param username: username (String)
    :param obj_type: type of obj to be returned.
    :return: QIcon obj, svg (ByteArray)
    """
    image_url = 'https://api.multiavatar.com/{0}.svg?apikey=bj5N7ftocy9dzF'.format(username)
    pixmap_obj = QPixmap()
    svg_data = requests.get(image_url).content
    pixmap_obj.loadFromData(svg_data)

    if obj_type == "QICON":
        return QIcon(pixmap_obj)

    if obj_type == "SVG":
        return bytearray(svg_data.decode(), encoding='utf-8')


def randomColor():
    rgb_color = [
        [255, 85, 127],
        [255, 85, 0],
        [85, 170, 127],
        [32, 147, 121],
        [38, 60, 83],
        [228, 151, 77],
        [107, 130, 199],
        [128, 64, 64],
        [128, 128, 64],
        [234, 209, 555],
    ]
    return rgb_color[random.randint(0, 9)]

def run(ClientTCP):
    # window = QtWidgets.QMainWindow()
    # LSF = MainChatScreen(ClientTCP= ClientTCP)
    # LSF.setupUi(window)
    # window.show()
    print("MAIN_SCREEN_WINDOW")